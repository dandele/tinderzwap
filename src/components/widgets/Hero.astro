---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  image = await Astro.slots.render('image'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const errors = { email: "" };
let successMessage = "";

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email");

    if (!email || typeof email !== 'string') {
      errors.email = "Inserisci un indirizzo email valido.";
    } else {
      console.log(email);

      // Invia i dati al webhook di Make
      const webhookUrl = import.meta.env.MAKE_WEBHOOK_URL;

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        throw new Error(`Errore nel webhook: ${response.statusText}`);
      }

      successMessage = "Email inviata con successo!";
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      errors.email = "Si è verificato un errore nell'invio dell'email.";
    }
  }
}
---
<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="py-12 md:py-20">
      <div class="text-center pb-2 md:pb-4 max-w-5xl mx-auto">
        {tagline && (
          <p class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase" set:html={tagline} />
        )}
        {title && (
          <h1 class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200" set:html={title} />
        )}
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      
      <!-- <form method="POST" class="flex justify-center items-center space-x-4 mt-4">
        <label class="mb-4">
          <span class="block text-sm font-medium text-gray-700 hidden">Email:</span>
          <input 
            type="email" 
            name="email" 
            required 
            class="mt-1 p-2 border border-gray-300 rounded w-200" 
            placeholder="Inserisci la tua email"
          />
        </label>
        {errors.email && <p class="text-red-500 mb-2">{errors.email}</p>}
        {successMessage && <p class="text-green-500 mb-2">{successMessage}</p>}
        <button type="submit" class="p-2 bg-blue-600 text-white rounded">
          Iscriviti
        </button>
      </form> -->

      <form method="POST" class="mt-4 max-w-lg mx-auto">
        <!-- Label opzionale sopra il form (nascosto) -->
        <label class="block text-sm font-medium text-gray-700 mb-2 hidden">
          Email:
        </label>
        
        <!-- Contenitore Flex per Input e Pulsante -->
        <div class="flex flex-col sm:flex-row items-center sm:space-x-2 space-y-2 sm:space-y-0">
          <input 
            type="email" 
            name="email" 
            required 
            class="flex-grow p-2 border border-gray-300 rounded-md sm:w-2/3 w-full" 
            placeholder="Inserisci la tua email"
          />
          <button type="submit" class="p-2 bg-blue-600 text-white px-8 rounded-md sm:w-auto w-full">
            Iscriviti
          </button>
        </div>
        
        <!-- Messaggi di Errore e Successo -->
        {errors.email && <p class="text-red-500 mt-2">{errors.email}</p>}
        {successMessage && <p class="text-green-500 mt-2">{successMessage}</p>}
      </form>
      

      <div>
        {image && (
          <div class="relative m-auto max-w-5xl">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto rounded-md w-full"
                widths={[400, 768, 1024, 2040]}
                sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                loading="eager"
                width={1024}
                height={576}
                {...image}
              />
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  // Non è necessario alcuno script client-side poiché gestiamo la POST server-side
</script>
